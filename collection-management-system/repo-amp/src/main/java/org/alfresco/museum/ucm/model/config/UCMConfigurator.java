//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.09.10 at 02:54:35 PM EDT 
//


package org.alfresco.museum.ucm.model.config;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.alfresco.model.ContentModel;
import org.alfresco.museum.ucm.UCMConstants;
import org.alfresco.museum.ucm.config.autogen.UCMConfig;
import org.alfresco.museum.ucm.config.autogen.UCMConfig.DataModel;
import org.alfresco.repo.forms.processor.node.UCMGenericFilter;
import org.alfresco.service.ServiceRegistry;
import org.alfresco.service.cmr.repository.ContentReader;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.repository.NodeService;
import org.alfresco.service.cmr.repository.Path;
import org.alfresco.service.cmr.repository.StoreRef;
import org.alfresco.service.cmr.search.ResultSet;
import org.alfresco.service.cmr.search.SearchService;
import org.alfresco.service.namespace.QName;
import org.alfresco.util.ApplicationContextHelper;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.ApplicationContext;

// This sample application demonstrates how to unmarshal an instance
// document into a Java content tree and access data contained within it.

public class UCMConfigurator
{
	public static final String REPOSITORY_CONFIG = "repoConfig";
	private static UCMConfig.DataModel dm = null;
	
	private static Log logger = LogFactory.getLog(UCMConfigurator.class);
	private static Map<String, UCMSitesConfig>configurations = new HashMap<String,UCMSitesConfig>();

	private static ServiceRegistry serviceRegistry;
	private static StoreRef storeRef;
	private static SearchService searchService;
	private static NodeService nodeService;
	private static boolean wasContextLoaded = false;
	
	private static UCMGenericFilter<?> ucmGenericFilter = new UCMGenericFilter();
	
	private static final String CONFIG_FILE="ucm-config.xml";
	
	private class UCMSitesConfig {
		public String siteName = null;
		public UCMConfig.DataModel dataModel;
		
		public UCMSitesConfig (String nam, DataModel dm) 
		{
			siteName = nam;
			dataModel = dm;
			
		}
	}

	private static void init() throws IOException
	{
		if (ApplicationContextHelper.isContextLoaded()) {
//			ApplicationContext ac = ApplicationContextHelper.getApplicationContext();
			serviceRegistry = (ServiceRegistry) ApplicationContextHelper.getApplicationContext().getBean("serviceRegistry");
			searchService = serviceRegistry.getSearchService();
			storeRef = new StoreRef(StoreRef.PROTOCOL_WORKSPACE, "SpaceStore");
			searchService.query(storeRef, SearchService.LANGUAGE_LUCENE, "PATH:\"/app:company_home/st:site");
			nodeService = serviceRegistry.getNodeService();
			wasContextLoaded=true;
		}
	}
	
	private static void unmarshalConfiguration(InputStream cis) throws JAXBException, IOException
	{
	    try {
	    	
	        // create a JAXBContext capable of handling classes generated into the UCMConfig package
	        JAXBContext jc = JAXBContext.newInstance("org.alfresco.museum.ucm.config.autogen",  org.alfresco.museum.ucm.config.autogen.ObjectFactory.class.getClassLoader());
//	        JAXBContext jc = JAXBContext.newInstance("org.alfresco.museum.ucm.config.autogen.UCMConfig",  org.alfresco.museum.ucm.config.autogen.UCMConfig.class.getClassLoader());
	        
	        Unmarshaller u = jc.createUnmarshaller();
	        UCMConfig ucmConfig = (UCMConfig)u.unmarshal( cis );
	        dm = ucmConfig.getDataModel();
	        configurations.put(REPOSITORY_CONFIG, (new UCMConfigurator()).new UCMSitesConfig(REPOSITORY_CONFIG, dm));	        
	    } 
	    catch( JAXBException je ) {
	    	logger.error("Can not unmarshall configuration file. Error: "+je.getLocalizedMessage());
	        throw je;
	    }
	}

	/**
	 * Unmarshall config for the particular site
	 * TODO keep it for the future
	 * @param cis- input stream
	 * @param siteName - site name
	 * @throws JAXBException
	 */
	private static void unmarshalConfiguration(InputStream cis, String siteName )  throws JAXBException
	{
	    try {
	        // create a JAXBContext capable of handling classes generated into the UCMConfig package
	        JAXBContext jc = JAXBContext.newInstance("org.alfresco.museum.ucm.config.autogen",  org.alfresco.museum.ucm.config.autogen.ObjectFactory.class.getClassLoader());
	        
	        Unmarshaller u = jc.createUnmarshaller();
	        UCMConfig ucmConfig = (UCMConfig)u.unmarshal( cis );
	        dm = ucmConfig.getDataModel();
	        configurations.put(siteName, (new UCMConfigurator()).new UCMSitesConfig(siteName, dm));	        
	    } 
	    catch( JAXBException je ) {
	        throw je;
	    } 
	}
	
	/**
	 * Creates configuration for all sites in current repository.
	 * Unmarshall config for the particular site
	 * TODO keep it for the future
	 */
	private static void getAllConfigurations() throws JAXBException
	{
		InputStream cis = null;
		try {
			ResultSet rs = searchService.query(storeRef, SearchService.LANGUAGE_LUCENE, "PATH:\"/app:company_home/st:sites");
	
			List<NodeRef> sitesNodeRefs = rs.getNodeRefs();
			for (NodeRef siteNodeRef : sitesNodeRefs) {
				if (nodeService.getType(siteNodeRef).toString().equals(UCMConstants.SITE_TYPE)) {
					Path path = nodeService.getPath(siteNodeRef);
					String sitePath = path.toString();
					String configPath = sitePath += "cm" + UCMConstants.SYSTEM_FOLDER_NAME + "/" + "cm:site-config" + "/"
					        + "cm:"+CONFIG_FILE;
					ResultSet rs1 = searchService.query(storeRef, SearchService.LANGUAGE_LUCENE, configPath);
					if (rs == null || rs.length() == 0) {
						logger.error("!*** Configuration file is missing for the site "
						        + nodeService.getProperty(siteNodeRef, QName.createQName(UCMConstants.UCM_CONFIG_QNAME.toString(), "cm:name")));
					}
					ContentReader reader = serviceRegistry.getContentService().getReader(rs1.getNodeRef(0), ContentModel.PROP_CONTENT);
					cis = reader.getContentInputStream();
					unmarshalConfiguration(cis, sitePath);
	
				}
			}
		}
		finally  {
			if (cis != null) {
				try  {
					cis.close();
				}
				catch(IOException ioe) {
					logger.warn("Can not close the  configuration stream "+ioe.getLocalizedMessage(), ioe);
				}
				cis=null;
			}
		}
	}

	/**
	 * Create configuration for the current site. SHould run when site is accessed the first time
	 * @param nodeRef
	 * @return
	 * 
	 * TODO Finish it for the latest releases. Need to modify create (any node) UI behaviour
	 * 
	 */
	private static String getConfiguration(NodeRef nodeRef) 
	{
		NodeRef configNodeRef = null;
		String siteName = null;
		try {
			siteName = ucmGenericFilter.getSiteName(nodeRef);
			
			String configPath = "PATH:\"/app:company_home/st:sites/"+siteName+"/"+"cm" + UCMConstants.SYSTEM_FOLDER_NAME + "/" + "cm:site-config" + "/"+ UCMConstants.UCM_CONFIG_FILE_NAME;
			ResultSet rs = searchService.query(storeRef, SearchService.LANGUAGE_LUCENE, configPath);
			if (rs != null && rs.length() != 0) {
				configNodeRef = rs.getNodeRefs().get(0);
				
				ContentReader reader = serviceRegistry.getContentService().getReader(configNodeRef, ContentModel.PROP_CONTENT);
				InputStream cis = reader.getContentInputStream();
				String trueSiteName = siteName.replaceFirst("/"+"cm", "");
				unmarshalConfiguration(cis, siteName);
				
				return siteName;
			}
			else
				logger.error("!*** Configuration file is missing for the site " +siteName);
		}
		catch(org.alfresco.service.cmr.dictionary.InvalidTypeException ite) {
			logger.error("Invalid node type for "+ucmGenericFilter.getNodeName(configNodeRef, UCMConstants.PROP_CM_CMOBJECTNAME_QNAME));
		}
	    catch( JAXBException je ) {
	    	try {
				logger.error("can not unmarshal configuration file "+ucmGenericFilter.getNodeService().getPaths(configNodeRef, true));
	    	}
	    	catch(org.alfresco.service.cmr.repository.InvalidNodeRefException ine) {
		    	logger.error("INTERNAL :: Invalid configuration node Exception");
		    }
	        je.printStackTrace();
	    } 
		logger.error("!*** Configuration file is missing for the site " +siteName);
		return null;
	}

	/**
	 * Get configuration for entire repository
	 */
	@SuppressWarnings("unused")
    private static void getConfiguration()  throws Exception
	{
		InputStream cis = null;
		if (!wasContextLoaded) {
			init();
		}
		if (wasContextLoaded) {  // so far so good
			NodeRef configNodeRef = null;
			try {
				ResultSet rs = searchService.query(storeRef, SearchService.LANGUAGE_LUCENE, "PATH:\"/app:company_home/st:sites/cm:"+CONFIG_FILE);
		
				List<NodeRef> rsNodeRefsList = rs.getNodeRefs();
		
				if (rsNodeRefsList == null || rsNodeRefsList.size() == 0)
					logger.error("!*** Configuration file is missing");
					
				configNodeRef = rsNodeRefsList.get(0);
				ContentReader reader = serviceRegistry.getContentService().getReader(configNodeRef, ContentModel.PROP_CONTENT);
				cis = reader.getContentInputStream();
			}
			catch(org.alfresco.service.cmr.dictionary.InvalidTypeException ite) {
				try {
					logger.error("Invalid node type for "+ucmGenericFilter.getNodeName(configNodeRef, UCMConstants.PROP_CM_CMOBJECTNAME_QNAME));
		    	}
		    	catch(org.alfresco.service.cmr.repository.InvalidNodeRefException ine) {
			    	logger.error("INTERNAL :: Invalid configuration node Exception");
			    }
			}

		}
		else { // still no luck
			boolean DEBUG = false;

			if (!DEBUG) { 
				logger.info("Can not get configuration file from store. Context is not loaded yet. Will try form the classpath");
				ClassLoader cl = UCMConfigurator.class.getClassLoader();
				cis = cl.getResourceAsStream(CONFIG_FILE);
			}
			else {
				/**
				 * TODO remove it?
				 */
				cis = new FileInputStream("C:/Users/gd85376/Documents/GitHub/museum-collections/collection-management-system/runner/target/tomcat/webapps/collection-management-system-repo/WEB-INF/classes/ucm-config.xml");
			}
		}
		if (cis == null)
			throw new Exception ("can not find configuration file");  

		try {
			unmarshalConfiguration(cis);
		}	
	    catch( JAXBException je ) {
			logger.error("can not unmarshal configuration file");
	        je.printStackTrace();
	    } 
		finally {
			cis.close();
			cis = null;
		}
	}

	public static UCMConfig.DataModel getDataModelConstraints() throws Exception
	{
		return getDataModelConstraints(REPOSITORY_CONFIG);
	}

	public static UCMConfig.DataModel getDataModelConstraints(String siteName) throws Exception
	{
		
		if (!configurations.containsKey(siteName) || configurations.get(siteName) == null )
			getConfiguration();
		
		return configurations.get(siteName).dataModel;
	}

	public static void main( String[] args ) 
	{
		try {
			InputStream cis = new FileInputStream("C:/Users/gd85376/Documents/GitHub/museum-collections/collection-management-system/runner/target/tomcat/webapps/collection-management-system-repo/WEB-INF/classes/ucm-config.xml");
			UCMConfigurator.unmarshalConfiguration(cis);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
    }

}

